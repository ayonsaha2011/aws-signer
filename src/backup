use hmac::{Hmac, Mac};
use sha2::{Digest, Sha256};
use std::collections::{HashMap, HashSet};
use url::{Url, ParseError};
use percent_encoding::{percent_decode_str, utf8_percent_encode, AsciiSet, CONTROLS};
use chrono::{Utc, DateTime};
use std::str::Utf8Error;
use lazy_static::lazy_static;

type HmacSha256 = Hmac<Sha256>;

// Define a set of characters to encode as per RFC3986
const FRAGMENT: &AsciiSet = &CONTROLS.add(b'!').add(b'\'').add(b'(').add(b')').add(b'*');

const HEX_CHARS: &[u8; 16] = b"0123456789abcdef";

// Utility function to encode a string as per RFC3986
pub fn encode_rfc3986(input: &str) -> String {
    utf8_percent_encode(input, FRAGMENT).to_string()
}

// Utility function to convert a buffer to a hexadecimal string
pub fn buf2hex(buffer: &[u8]) -> String {
    buffer.iter().map(|byte| format!("{:02x}", byte)).collect()
}

// Utility function to decode URL component, similar to decodeURIComponent in JavaScript
pub fn decode_url_component(input: &str) -> Result<String, ParseError> {
    percent_decode_str(input)
        .decode_utf8()
        .map(|s| s.to_string())
        .map_err(|_| ParseError::IdnaError) // Convert Utf8Error to a suitable ParseError variant
}

// Define UNSIGNABLE_HEADERS as a HashSet
lazy_static! {
    pub static ref UNSIGNABLE_HEADERS: HashSet<&'static str> = {
        let mut set = HashSet::new();
        set.insert("authorization");
        set.insert("content-type");
        set.insert("content-length");
        set.insert("user-agent");
        set.insert("presigned-expires");
        set.insert("expect");
        set.insert("x-amzn-trace-id");
        set.insert("range");
        set.insert("connection");
        set
    };
}

// Function to guess the service and region from the URL and headers
pub fn guess_service_region(url: &Url, headers: &HashMap<String, String>) -> (String, String) {
    let hostname = url.host_str().unwrap_or("");
    let pathname = url.path();

    if hostname.ends_with(".on.aws") {
        if let Some(caps) = hostname.split('.').nth(0) {
            return ("lambda".to_string(), caps.to_string());
        }
    } else if hostname.ends_with(".r2.cloudflarestorage.com") {
        return ("s3".to_string(), "auto".to_string());
    } else if hostname.ends_with(".backblazeb2.com") {
        let parts: Vec<&str> = hostname.split('.').collect();
        if parts.len() > 2 && parts[1] == "s3" {
            return ("s3".to_string(), parts[2].to_string());
        }
    }

    let modified_hostname = hostname.replace("dualstack.", "");
    let parts: Vec<&str> = modified_hostname.split('.').collect();
    let mut service = parts.get(0).unwrap_or(&"").to_string();
    let mut region = parts.get(1).unwrap_or(&"").to_string();

    if region == "us-gov" {
        region = "us-gov-west-1".to_string();
    } else if region == "s3" || region == "s3-accelerate" {
        region = "us-east-1".to_string();
        service = "s3".to_string();
    } else if service == "iot" {
        if hostname.starts_with("iot.") {
            service = "execute-api".to_string();
        } else if hostname.starts_with("data.jobs.iot.") {
            service = "iot-jobs-data".to_string();
        } else {
            service = if pathname == "/mqtt" {
                "iotdevicegateway".to_string()
            } else {
                "iotdata".to_string()
            };
        }
    } else if service == "autoscaling" {
        let default_value = "".to_string();
        let target_prefix = headers.get("X-Amz-Target").unwrap_or(&default_value);
        if target_prefix.starts_with("AnyScaleFrontendService") {
            service = "application-autoscaling".to_string();
        } else if target_prefix.starts_with("AnyScaleScalingPlannerFrontendService") {
            service = "autoscaling-plans".to_string();
        }
    } else if region.is_empty() && service.starts_with("s3-") {
        region = service[3..].replace("fips-", "").replace("external-1", "").to_string();
        service = "s3".to_string();
    } else if service.ends_with("-fips") {
        service = service[..service.len()-5].to_string();
    }

    (service, region)
}

// HMAC SHA-256 hashing function
pub fn hmac_sha256(key: &[u8], data: &[u8]) -> Vec<u8> {
    let mut mac = HmacSha256::new_from_slice(key).expect("HMAC can take key of any size");
    mac.update(data);
    mac.finalize().into_bytes().to_vec()
}

// SHA-256 hashing function
pub fn sha256_hash(data: &[u8]) -> Vec<u8> {
    let mut hasher = Sha256::new();
    hasher.update(data);
    hasher.finalize().to_vec()
}

#[derive(Debug, Clone)]
pub struct SignedRequest {
    pub method: String,
    pub url: Url,
    pub headers: HashMap<String, String>,
    pub body: Option<String>,
}

#[derive(Debug)]
pub struct AwsV4Signer {
    pub method: String,
    pub url: Url,
    pub headers: HashMap<String, String>,
    pub body: Option<String>,
    pub access_key_id: String,
    pub secret_access_key: String,
    pub session_token: Option<String>,
    pub service: String,
    pub region: String,
    pub cache: HashMap<String, Vec<u8>>,
    pub datetime: String,
    pub sign_query: bool,
    pub append_session_token: bool,
    pub all_headers: bool,
    pub single_encode: bool,
    pub signable_headers: Vec<String>,
    pub signed_headers: String,
    pub canonical_headers: String,
    pub credential_string: String,
    pub encoded_path: String,
    pub encoded_search: String,
}

impl AwsV4Signer {
    pub fn new(
        method: Option<String>,
        url: &str,
        headers: Option<HashMap<String, String>>,
        body: Option<String>,
        access_key_id: String,
        secret_access_key: String,
        session_token: Option<String>,
        service: Option<String>,
        region: Option<String>,
        cache: Option<HashMap<String, Vec<u8>>>,
        datetime: Option<String>,
        sign_query: Option<bool>,
        append_session_token: Option<bool>,
        all_headers: Option<bool>,
        single_encode: Option<bool>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        // Validate required parameters
        if url.is_empty() {
            return Err("url is a required option".into());
        }
        if access_key_id.is_empty() {
            return Err("accessKeyId is a required option".into());
        }
        if secret_access_key.is_empty() {
            return Err("secretAccessKey is a required option".into());
        }

        // Set defaults
        let method = method.unwrap_or_else(|| if body.is_some() { "POST".to_string() } else { "GET".to_string() });
        let url = Url::parse(url)?;
        let mut headers = headers.unwrap_or_else(HashMap::new);
        let cache = cache.unwrap_or_else(HashMap::new);

        // Guess service and region if not provided
        let (guessed_service, guessed_region) = if service.is_none() || region.is_none() {
            guess_service_region(&url, &headers)
        } else {
            (service.clone().unwrap_or_default(), region.clone().unwrap_or_default())
        };

        // Set defaults if service or region is not specified
        let service = service.or(Some(guessed_service)).unwrap_or_else(|| "s3".to_string());
        let region = region.or(Some(guessed_region)).unwrap_or_else(|| "auto".to_string());

        // Set datetime
        let datetime = datetime.unwrap_or_else(|| {
            let now: DateTime<Utc> = Utc::now();
            now.format("%Y%m%dT%H%M%SZ").to_string()
        });

        let sign_query = sign_query.unwrap_or(false);
        let append_session_token = append_session_token.unwrap_or(service == "iotdevicegateway");
        let all_headers = all_headers.unwrap_or(false);
        let single_encode = single_encode.unwrap_or(false);

        // Prepare headers
        headers.remove("Host");
        if service == "s3" && !sign_query && !headers.contains_key("X-Amz-Content-Sha256") {
            headers.insert("X-Amz-Content-Sha256".to_string(), "UNSIGNED-PAYLOAD".to_string());
        }

        // Set X-Amz-Date and X-Amz-Security-Token headers
        headers.insert("X-Amz-Date".to_string(), datetime.clone());
        if let Some(token) = &session_token {
            if !append_session_token {
                headers.insert("X-Amz-Security-Token".to_string(), token.clone());
            }
        }

        // Prepare signable and canonical headers
        let mut signable_headers: Vec<String> = vec!["host".to_string()];
        signable_headers.extend(headers.keys().cloned().filter(|header| all_headers || !UNSIGNABLE_HEADERS.contains(header.as_str())));
        signable_headers.sort();

        let signed_headers = signable_headers.join(";");

        let canonical_headers = signable_headers.iter()
            .map(|header| format!("{}:{}", header, headers.get(header).unwrap_or(&"".to_string()).trim()))
            .collect::<Vec<String>>()
            .join("\n");

        // Prepare credential string
        let credential_string = format!("{}/{}/{}/aws4_request", &datetime[..8], region, service);

        // Encode path and search
        let encoded_path = Self::encode_path(&url, service.as_str(), single_encode);
        let encoded_search = Self::encode_search(&url, service.as_str());

        Ok(AwsV4Signer {
            method,
            url,
            headers,
            body,
            access_key_id,
            secret_access_key,
            session_token,
            service,
            region,
            cache,
            datetime,
            sign_query,
            append_session_token,
            all_headers,
            single_encode,
            signable_headers,
            signed_headers,
            canonical_headers,
            credential_string,
            encoded_path,
            encoded_search,
        })
    }

    pub async fn auth_header(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let access_key_id = self.access_key_id.clone();
        let credential_string = self.credential_string.clone();
        let signed_headers = self.signed_headers.clone();
        let signature = self.signature().await?;

        Ok(format!(
            "AWS4-HMAC-SHA256 Credential={}/{}, SignedHeaders={}, Signature={}",
            access_key_id,
            credential_string,
            signed_headers,
            signature
        ))
    }

    pub async fn signature(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let date = &self.datetime[..8];
        let cache_key = format!("{},{},{},{}", self.secret_access_key, date, self.region, self.service);
        let mut k_credentials = self.cache.get(&cache_key).cloned();

        if k_credentials.is_none() {
            let k_date = hmac_sha256(format!("AWS4{}", self.secret_access_key).as_bytes(), date.as_bytes());
            let k_region = hmac_sha256(&k_date, self.region.as_bytes());
            let k_service = hmac_sha256(&k_region, self.service.as_bytes());
            k_credentials = Some(hmac_sha256(&k_service, b"aws4_request"));
            self.cache.insert(cache_key.clone(), k_credentials.clone().unwrap());
        }

        let signature = hmac_sha256(k_credentials.unwrap().as_slice(), self.string_to_sign().await?.as_bytes());
        Ok(buf2hex(&signature))
    }

    pub async fn string_to_sign(&self) -> Result<String, Box<dyn std::error::Error>> {
        Ok(format!(
            "AWS4-HMAC-SHA256\n{}\n{}\n{}",
            self.datetime,
            self.credential_string,
            buf2hex(&sha256_hash(self.canonical_string().await?.as_bytes()))
        ))
    }

    pub async fn canonical_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        Ok(format!(
            "{}\n{}\n{}\n{}\n{}\n{}",
            self.method.to_uppercase(),
            self.encoded_path,
            self.encoded_search,
            format!("{}\n", self.canonical_headers),
            self.signed_headers,
            self.hex_body_hash().await?
        ))
    }

    pub async fn hex_body_hash(&self) -> Result<String, Box<dyn std::error::Error>> {
        let hash_header = self.headers.get("X-Amz-Content-Sha256").cloned();
        let hash_value = if let Some(header) = hash_header {
            header
        } else if self.service == "s3" && self.sign_query {
            "UNSIGNED-PAYLOAD".to_string()
        } else {
            if let Some(body) = &self.body {
                buf2hex(&sha256_hash(body.as_bytes()))
            } else {
                buf2hex(&sha256_hash(b""))
            }
        };
        Ok(hash_value)
    }

    pub async fn sign(&mut self) -> Result<SignedRequest, Box<dyn std::error::Error>> {
        if self.sign_query {
            let signature = self.signature().await?;
            self.url.query_pairs_mut().append_pair("X-Amz-Signature", &signature);

            if let Some(token) = &self.session_token {
                if self.append_session_token {
                    self.url.query_pairs_mut().append_pair("X-Amz-Security-Token", token);
                }
            }
        } else {
            let auth_header = self.auth_header().await?;
            self.headers.insert("Authorization".to_string(), auth_header);
        }

        Ok(SignedRequest {
            method: self.method.clone(),
            url: self.url.clone(),
            headers: self.headers.clone(),
            body: self.body.clone(),
        })
    }

    // Helper function to encode path
    pub fn encode_path(url: &Url, service: &str, single_encode: bool) -> String {
        let mut encoded_path = if service == "s3" {
            decode_url_component(url.path()).unwrap_or_else(|_| url.path().to_string())
        } else {
            url.path().replace("//", "/")
        };

        if !single_encode {
            encoded_path = urlencoding::encode(&encoded_path).to_string().replace("%2F", "/");
        }

        encode_rfc3986(&encoded_path)
    }

    // Helper function to encode search parameters
    pub fn encode_search(url: &Url, service: &str) -> String {
        let mut seen_keys = HashSet::new();
        let mut search_params: Vec<(String, String)> = url.query_pairs()
            .filter(|(k, _)| {
                if k.is_empty() {
                    return false;
                }
                if service == "s3" && seen_keys.contains(k.as_ref()) {
                    return false;
                }
                seen_keys.insert(k.clone());
                true
            })
            .map(|(k, v)| (encode_rfc3986(&urlencoding::encode(&k)), encode_rfc3986(&urlencoding::encode(&v))))
            .collect();

        search_params.sort();

        search_params.iter().map(|(k, v)| format!("{}={}", k, v)).collect::<Vec<String>>().join("&")
    }
}

#[derive(Debug)]
pub struct AwsClient {
    pub access_key_id: String,
    pub secret_access_key: String,
    pub session_token: Option<String>,
    pub service: Option<String>,
    pub region: Option<String>,
    pub cache: HashMap<String, Vec<u8>>,
    pub retries: u32,
    pub init_retry_ms: u64,
}

impl AwsClient {
    pub fn new(
        access_key_id: String,
        secret_access_key: String,
        session_token: Option<String>,
        service: Option<String>,
        region: Option<String>,
        cache: Option<HashMap<String, Vec<u8>>>,
        retries: Option<u32>,
        init_retry_ms: Option<u64>,
    ) -> Self {
        AwsClient {
            access_key_id,
            secret_access_key,
            session_token,
            service,
            region,
            cache: cache.unwrap_or_default(),
            retries: retries.unwrap_or(10),
            init_retry_ms: init_retry_ms.unwrap_or(50),
        }
    }

    pub async fn sign(&mut self, input: &str, init: Option<HashMap<String, String>>) -> Result<Url, Box<dyn std::error::Error>> {
        let mut signer = AwsV4Signer::new(
            Some("GET".to_string()), // Example method
            input,
            init.clone(),
            None, // body
            self.access_key_id.clone(),
            self.secret_access_key.clone(),
            self.session_token.clone(),
            self.service.clone(),
            self.region.clone(),
            Some(self.cache.clone()),
            None, // datetime
            None, // sign_query
            None, // append_session_token
            None, // all_headers
            None, // single_encode
        )?;
        let signed_request = signer.sign().await?;
        Ok(signed_request.url)
    }

    pub async fn fetch(&mut self, input: &str, init: Option<HashMap<String, String>>) -> Result<String, Box<dyn std::error::Error>> {
        for i in 0..=self.retries {
            let signed_url = self.sign(input, init.clone()).await?;
            // Simulate a fetch operation
            let res_status = 200; // Placeholder status code
            if i == self.retries || (res_status < 500 && res_status != 429) {
                return Ok(format!("Fetched: {}", signed_url));
            }
            tokio::time::sleep(tokio::time::Duration::from_millis((self.init_retry_ms * 2_u64.pow(i)) as u64)).await;
        }
        Err("An unknown error occurred, ensure retries is not negative".into())
    }
}
